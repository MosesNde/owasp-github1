             <imports>
                 <import>System.IO</import>
             </imports>
                            <code>
                    File.Exists({{in_var_name}});
                </code>
                        <safety safe="0" unsafe="0"/>
             <input_type>string</input_type>
             <exec_type>none</exec_type>
         </sample>
 
         <sample>
      <flaw_type flaw_group="A1">CWE_89</flaw_type>
          <path>
            <dir>select_from</dir>
            <dir>concatenation_simple_quote</dir>
          </path>
          <comment>construction : concatenation with simple quote</comment>
        <imports></imports>
                <code>string query = "SELECT * FROM '" + {{in_var_name}} + "'";</code>
              <safety safe="0" unsafe="0"/>
          <input_type>string</input_type>
          <exec_type>SQL</exec_type>
         </sample>
 
         <sample>
             <imports>
                 <import>System.IO</import>
             </imports>
                            <code>
                    System.Diagnostics.Process.Start("/bin/bash", "-c 'ls " + {{in_var_name}} + "'");
                </code>
                        <safety safe="0" unsafe="0"/>
             <input_type>string</input_type>
             <exec_type>none</exec_type>
         </sample>
                 <import>System.Security.Cryptography</import>
                 <import>System.Text</import>
             </imports>
                            <code>
                    using (MD5 md5Hash = MD5.Create())
                     {
                        byte[] data = md5Hash.ComputeHash(Encoding.UTF8.GetBytes({{in_var_name}}));

                        // Create a new Stringbuilder to collect the bytes
                        // and create a string.
                        StringBuilder sBuilder = new StringBuilder();

                        // Loop through each byte of the hashed data
                        // and format each one as a hexadecimal string.
                        for (int i = 0; i &lt; data.Length; i++)
                        {
                            sBuilder.Append(data[i].ToString("x2"));
                        }

                        string hash = sBuilder.ToString();
                     }
                </code>
                        <safety safe="0" unsafe="1"/>
             <input_type>string</input_type>
             <exec_type>none</exec_type>
             <options need_complexity="0"/>
             <flaw_type flaw_group="A1">CWE_89</flaw_type>
             <comment>sink : SQL query</comment>
             <imports></imports>
                            <code>string query = "SELECT * FROM Articles WHERE id="+{{in_var_name}};</code>
                        <safety safe="0" unsafe="0"/>
             <input_type>string</input_type>
             <exec_type>SQL</exec_type>
         </sample>
             <flaw_type flaw_group="A1">CWE_89</flaw_type>
             <comment>sink : SQL query</comment>
             <imports></imports>
                            <code>
                    string query = "SELECT * FROM Articles WHERE id=@placeholder";
                    string checked_data = {{in_var_name}};
                </code>
                        <safety safe="1" unsafe="0"/>
             <input_type>string</input_type>
             <exec_type>SQL_prepared</exec_type>
         </sample>
             <flaw_type flaw_group="A1">CWE_90</flaw_type>
             <comment>sink : LDAP Query</comment>
             <imports></imports>
                            <code>string query = "(&amp;(objectClass=person)(sn=" + {{ in_var_name }} + "))";</code>
                        <safety safe="0" unsafe="0"/>
             <input_type>string</input_type>
             <exec_type>LDAP</exec_type>
         </sample>
             <flaw_type flaw_group="A1">CWE_91</flaw_type>
             <comment>sink : XPATH Query</comment>
             <imports></imports>
                            <code>string query = "//user[@name='" + {{ in_var_name }} + "']";</code>
                        <safety safe="0" unsafe="0"/>
             <input_type>string</input_type>
             <exec_type>XPATH</exec_type>
         </sample>
                 <dir>XPATH_prepared</dir>
             </path>
             <flaw_type flaw_group="A1">CWE_91</flaw_type>
            <comment>sink : XPATH prepared Query</comment>
             <imports></imports>
                            <code>
                    string query = "//user[@name='{0}']";
                    string checked_data = {{in_var_name}};
                </code>
                        <safety safe="1" unsafe="0"/>
             <input_type>string</input_type>
             <exec_type>XPATH_prepared</exec_type>
         </sample>
             <flaw_type flaw_group="A9">CWE_476</flaw_type>
             <comment>sink : NULL Pointer Dereference</comment>
             <imports></imports>
                            <code>
                    string cmd = null;
                    cmd = Environment.GetEnvironmentVariable("cmd");
                    cmd = cmd.Trim();
                </code>
                        <safety safe="0" unsafe="1"/>
             <input_type>none</input_type>
             <exec_type>none</exec_type>
         </sample>
                 <import>System.Linq</import>
                 <import>MySql.Data.MySqlClient</import>
             </imports>
                            <code>
                    var data = new Dictionary&lt;string, string&gt;();
                    foreach (var row in File.ReadAllLines("./config.properties"))
                        data.Add(row.Split('=')[0], string.Join("=",row.Split('=').Skip(1).ToArray()));

                    Console.WriteLine(data["username"]);
                    Console.WriteLine(data["password"]);
                    string connectionString = @"server=localhost;uid=" + data["username"] + ";password=" + data["password"] + ";database=dbname";
                    MySqlConnection dbConnection = null;

                    try {
                        dbConnection = new MySqlConnection(connectionString);
                        dbConnection.Open();

                        dbConnection.Close();

                    } catch (Exception e) {
                        Console.WriteLine(e.ToString());
                    }
                </code>
                        <safety safe="0" unsafe="1"/>
             <input_type>none</input_type>
             <exec_type>none</exec_type>
             <options need_complexity="0"/>