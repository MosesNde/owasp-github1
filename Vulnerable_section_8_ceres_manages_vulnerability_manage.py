             Returns:
                 bool
             """
            code, _, stderr = execute_shell_command(f"dnf repoinfo --repo {repo_id}")
             if code == CommandExitCode.SUCCEED:
                 return True
             LOGGER.warning(f"Failed to query repo information with repo id {repo_id}.")
         # powertop:powertop-2.9-12.oe1.x86_64
         # libusbx:libusbx-1.0.23-1.oe1.x86_64
         code, stdout, _ = execute_shell_command(
            """
        rpm -qa --queryformat '%{NAME}:%{NAME}-%{VERSION}-%{RELEASE}.%{ARCH}\n' | grep kernel
        """
         )
         if code != CommandExitCode.SUCCEED or not stdout:
             LOGGER.error("query installed packages info failed!")
         # CVE-2021-45469  Important/Sec. kernel-4.19.90-2201.1.0.0132.oe1.x86_64
         # CVE-2021-44733  Important/Sec. kernel-4.19.90-2201.1.0.0132.oe1.x86_64
         unfixed_cves = []
        code, stdout, stderr = execute_shell_command("dnf updateinfo list cves | grep kernel")
         if code != CommandExitCode.SUCCEED:
             LOGGER.error("query unfixed cve info failed by dnf!")
             LOGGER.error(stderr)
         # CVE-2021-42574  Important/Sec. binutils-2.34-19.oe1.x86_64                     -
         # CVE-2023-1513   Important/Sec. kernel-4.19.90-2304.1.0.0196.oe1.x86_64         patch-kernel-4.19.90-2112...
         cve_info_list = []
        code, stdout, stderr = execute_shell_command("dnf hot-updateinfo list cves | grep kernel")
         if code != CommandExitCode.SUCCEED:
             LOGGER.error("query unfixed cve info failed by dnf!")
             LOGGER.error(stderr)
             return fixed_cves
         current_kernel_rpm_name = f"kernel-{current_kernel_version}"
 
        code, stdout, stderr = execute_shell_command("dnf updateinfo list cves --installed |grep kernel")
         if code != CommandExitCode.SUCCEED:
             LOGGER.error("query fixed cve info failed!")
             LOGGER.error(stderr)
             return []
         current_kernel_rpm_name = f"kernel-{current_kernel_version}"
 
        code, stdout, stderr = execute_shell_command("dnf hot-updateinfo list cves --installed | grep kernel")
         if code != CommandExitCode.SUCCEED:
             LOGGER.error("query unfixed cve info failed by dnf!")
             LOGGER.error(stderr)
         # CVE-2023-1111 redis-6.2.5-1/SGL_CVE_2023_1111_CVE_2023_1112-1-1/redis-server    NOT-APPLIED
         # CVE-2023-1112 redis-6.2.5-1/SGL_CVE_2023_1111_CVE_2023_1112-1-1/redis-server    NOT-APPLIED
         result = {}
        code, stdout, stderr = execute_shell_command("dnf hotpatch --list cves")
         if code != CommandExitCode.SUCCEED:
             LOGGER.error("query applied hotpatch info failed!")
             LOGGER.error(stderr)
             Tuple[str, str]
             a tuple containing two elements (upgrade result, package upgrade log).
         """
        code, stdout, stderr = execute_shell_command(f"dnf upgrade-en {rpm} -y")
         if code != CommandExitCode.SUCCEED:
             LOGGER.error(stderr)
             return TaskExecuteRes.FAIL, stdout + stderr
         final_fix_result, package_update_info = TaskExecuteRes.SUCCEED, []
 
         for rpm in rpms:
            code, stdout, stderr = execute_shell_command(f"dnf hotupgrade {rpm} -y")
             tmp = {
                 "available_rpm": rpm,
                 "result": TaskExecuteRes.SUCCEED,
                 "kernel-5.10.0-60.91.0.116.oe2203.x86_64": ["CVE-2023-2006"]
                 }}
         """
        code, stdout, stderr = execute_shell_command("dnf updateinfo list cves")
         if code != CommandExitCode.SUCCEED:
             LOGGER.error("Failed to query update info by dnf!")
             LOGGER.error(stderr)
         Example:
             "Succeed", {"kernel": {"CVE-2023-XXXX","CVE-2022-XXXX"}}
         """
        code, stdout, stderr = execute_shell_command("dnf hot-updateinfo list cves --installed")
         if code != CommandExitCode.SUCCEED:
             LOGGER.error("Failed to query fixed cves by hotpatch!")
             LOGGER.error(stderr)
             return package_set
 
         # The exit code of the command is 1 when input parameters contains assumeno
        _, stdout, _ = execute_shell_command(f"dnf upgrade-en {package} --assumeno")
 
         installed_rpm_info = re.findall(r"(Upgrading|Installing):(.*?)Transaction Summary", stdout, re.S)
         if not installed_rpm_info:
             return False
 
         LOGGER.info("The Linux boot kernel is about to be changed")
        code, _, stderr = execute_shell_command(f"grubby --set-default={boot_kernel_path}")
 
         if code != CommandExitCode.SUCCEED:
             LOGGER.info("The Linux boot kernel change failed")
         # ---------------------------------------------------------------------
         # 3    | rm aops-ceres  | 2023-11-30 09:57    | Removed       | 1
         # 2    | install gcc    | 2023-11-30 09:57    | Install       | 1
        code, stdout, stderr = execute_shell_command("dnf history | grep -E '^\s*[0-9]+'|head -1|awk '{print $1}'")
         if code != CommandExitCode.SUCCEED:
             LOGGER.error(stderr)
             return None
         # Last metadata expiration check: 3:25:24 ago on Wed 13 Sep 2023 08:16:17 AM CST.
         # Gonna accept this hot patch: kernel-5.10.0-153.12.0.92.oe2203sp2/ACC-1-1
         # accept hot patch 'kernel-5.10.0-153.12.0.92.oe2203sp2/ACC-1-1' failed, remain original status
        code, stdout, stderr = execute_shell_command(f"dnf hotpatch --{operation} {wait_to_remove_patch}")
         if code != CommandExitCode.SUCCEED or 'failed' in stdout:
             LOGGER.error(f"hotpatch {hotpatch} set status failed!")
             return False, stdout + stderr
                     "CVE-XXXX-XXX": {"patch 1", "patch 2"}
                 }
         """
        code, stdout, _ = execute_shell_command(f"dnf hot-updateinfo list cves --installed|grep patch")
         if code != CommandExitCode.SUCCEED:
             LOGGER.error(f"Failed to query the hotpatch list.")
             return None
         Args:
             hotpatch: hotpatch package which needs to remove
         """
        cmd = f"dnf remove {hotpatch} -y"
         _, stdout, stderr = execute_shell_command(cmd)
         return True, f"Command:{cmd}\n\n{stdout}\n{stderr}\n"